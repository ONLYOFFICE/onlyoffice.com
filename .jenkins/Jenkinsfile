println("Branch name: ${BRANCH_NAME}")

switch(BRANCH_NAME) {
  case "test_deploy":
    aws_region="us-east-1"
    region="info"
    cloud_front_distribution_id="EQ4O7B2M9Q51X"
    src_domain="test-new.teamlab.info"
    public_static_url="https://test-new.teamlab.info"
    onlyoffice_site_mysql_host="teamlab-4testing.cyxlgbdbuyvm.us-east-1.rds.amazonaws.com"
    onlyoffice_site_mysql_datebase="teamlab_site_test"
    onlyoffice_com_strapi_api_url="https://cms.teamlab.info"
    onlyoffice_com_next_public_site_url="https://www.onlyoffice.com"
    transporter_email_host="notify.teamlab.guru"
    transporter_email_port="587"
    break
  case "production_deploy":
    aws_region="us-east-1"
    region="com"
    MONITOR_ID = '8888888888888'
    src_domain="test-new.teamlab.info"
    public_static_url="https://test-new.teamlab.info"
    break
  default:
    println("Branch: ${BRANCH_NAME} do not for deploy.")
    break
}

pipeline {
  agent { label 'ubuntu' }
  triggers {
    githubPush()
  }
  options {
    disableConcurrentBuilds()
    buildDiscarder (logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  stages {
    
    stage('deploy') {
      when { 
        anyOf { branch 'test_deploy';
                branch 'production_deploy' }
      }
      environment {
        region = "${region}"
        src_domain="${src_domain}"
        public_static_url = "${public_static_url}"
        onlyoffice_site_mysql_host="${onlyoffice_site_mysql_host}"
        onlyoffice_site_mysql_datebase="${onlyoffice_site_mysql_datebase}"
        onlyoffice_com_strapi_api_url="${onlyoffice_com_strapi_api_url}"
        onlyoffice_com_next_public_site_url="${onlyoffice_com_next_public_site_url}"
        transporter_email_host="${transporter_email_host}"
        transporter_email_port="${transporter_email_port}"
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'onlyoffice_site_test_mysql_credentials', 
                        passwordVariable: 'onlyoffice_site_mysql_password', 
                        usernameVariable: 'onlyoffice_site_mysql_user'),
                        usernamePassword(credentialsId: 'onlyoffice_site_test_email_credentials', 
                        passwordVariable: 'transporter_email_auth_password', 
                        usernameVariable: 'transporter_email_auth_user')]) {
        script {
        def escaped_password = sh(
                        script: """printf '%s\\n' "${transporter_email_auth_password}" | sed 's/[&/\\\\]/\\\\&/g'""",
                        returnStdout: true
                    ).trim()
                  
        sh '''
          cp .jenkins/build.sh .jenkins/site_build.sh

          sed -i "s^var_next_public_site_url^$onlyoffice_com_next_public_site_url^" .env
          sed -i "s^var_strapi_api_url^$onlyoffice_com_strapi_api_url^" .env

          sed -i "s^var_onlyoffice_site_mysql_host^$onlyoffice_site_mysql_host^" .env
          sed -i "s^var_onlyoffice_site_mysql_datebase^$onlyoffice_site_mysql_datebase^" .env
          sed -i "s^var_onlyoffice_site_mysql_user^$onlyoffice_site_mysql_user^" .env
          sed -i "s^var_onlyoffice_site_mysql_password^$onlyoffice_site_mysql_password^" .env

          sed -i "s^var_transporter_email_host^$transporter_email_host^" .env
          sed -i "s^var_transporter_email_port^$transporter_email_port^" .env
          sed -i "s^var_transporter_email_auth_user^$transporter_email_auth_user^" .env
          
          sed -i "s|var_transporter_email_auth_password|${escaped_password}|" .env
          
          if [ "${region}" = "info" ]; then
            cp .jenkins/robots.txt ./
          fi
          
          tar -czpf .jenkins/onlyoffice.com.tar.gz \
            --exclude ".git" \
            --exclude ".gitignore" \
            --exclude ".jenkins" \
            --exclude "README.md" .
          
          echo "Deploy from ${BRANCH_NAME} is starting."
        '''
        }}
        
        sshPublisher(failOnError: true, publishers: [sshPublisherDesc(configName: "strapi_oforms@${region}", 
          transfers: [sshTransfer(cleanRemote: false, 
            excludes: '', 
            execCommand: '''
              sudo bash /home/ubuntu/deploy/.jenkins/site_build.sh |& tee -a > /home/ubuntu/deploy/site_deploy.log
            ''', 
            execTimeout: 0, 
            flatten: false, 
            makeEmptyDirs: false, 
            noDefaultExcludes: false, 
            patternSeparator: '[, ]+', 
            remoteDirectory: '', 
            remoteDirectorySDF: false, 
            removePrefix: '', 
            sourceFiles: '.jenkins/onlyoffice.com.tar.gz,.jenkins/site_build.sh')], 
          usePromotionTimestamp: false, 
          useWorkspaceInPromotion: false, 
          verbose: false)])
      }
    }  

    stage('invalidation') {
      when { 
        anyOf { branch 'test_deploy';
                branch 'production_deploy' }
      }
      environment {
        aws_region = "${aws_region}"
        cloud_front_distribution_id = "${cloud_front_distribution_id}"
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'cmsoforms-user', 
                          passwordVariable: 'secret_key', 
                          usernameVariable: 'access_key')]) {
          sh '''
            export AWS_ACCESS_KEY_ID="$access_key"
            export AWS_SECRET_ACCESS_KEY="$secret_key"
            export AWS_DEFAULT_aws_region="$aws_region"
            
            echo "=== start invalidation ==="
            aws cloudfront create-invalidation \
              --distribution-id ${cloud_front_distribution_id} \
              --paths "/*"
          '''
        }
      }
    }  
  }
}